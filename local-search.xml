<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LVM</title>
    <link href="/2022/01/15/Linux/LVM/"/>
    <url>/2022/01/15/Linux/LVM/</url>
    
    <content type="html"><![CDATA[<h2 id="PV操作"><a href="#PV操作" class="headerlink" title="PV操作"></a>PV操作</h2><h3 id="创建PV"><a href="#创建PV" class="headerlink" title="创建PV"></a>创建PV</h3><p><code>pvcreate [devices]</code></p><h3 id="查询PV"><a href="#查询PV" class="headerlink" title="查询PV"></a>查询PV</h3><p><code>pvscan</code><br><code>pvdisplay [pv names]</code></p><h3 id="PV大小修改"><a href="#PV大小修改" class="headerlink" title="PV大小修改"></a>PV大小修改</h3><p><code>pvresize</code></p><h3 id="删除PV"><a href="#删除PV" class="headerlink" title="删除PV"></a>删除PV</h3><p><code>pvremove</code></p><h2 id="VG操作"><a href="#VG操作" class="headerlink" title="VG操作"></a>VG操作</h2><h3 id="创建VG"><a href="#创建VG" class="headerlink" title="创建VG"></a>创建VG</h3><p><code>vgcreate -s [pe大小，默认4M] [vg name] [pv names]</code></p><h3 id="查询VG"><a href="#查询VG" class="headerlink" title="查询VG"></a>查询VG</h3><p><code>vgscan</code><br><code>vgdisplay [vgnames]</code></p><h3 id="删除VG"><a href="#删除VG" class="headerlink" title="删除VG"></a>删除VG</h3><p><code>vgremove</code></p><h2 id="LV操作"><a href="#LV操作" class="headerlink" title="LV操作"></a>LV操作</h2><h3 id="创建LV"><a href="#创建LV" class="headerlink" title="创建LV"></a>创建LV</h3><p><code>lvcreate -L [lv大小] -n [lv name] [vg name]</code></p><h3 id="查询LV"><a href="#查询LV" class="headerlink" title="查询LV"></a>查询LV</h3><p><code>lvscan</code><br><code>lvdisplay [lvnames]</code></p><h3 id="PV大小修改-1"><a href="#PV大小修改-1" class="headerlink" title="PV大小修改"></a>PV大小修改</h3><p><code>pvresize</code></p><h3 id="删除LV"><a href="#删除LV" class="headerlink" title="删除LV"></a>删除LV</h3><p><code>lvremove</code></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos的syslog</title>
    <link href="/2022/01/15/Linux/centos%E7%9A%84syslog/"/>
    <url>/2022/01/15/Linux/centos%E7%9A%84syslog/</url>
    
    <content type="html"><![CDATA[<p>/var/log/message</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>syslog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未完成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S 集群部署</title>
    <link href="/2022/01/15/K8S/K8S%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/01/15/K8S/K8S%20%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="在安装过程中没有找到-ebtables-或者其他类似的可执行文件"><a href="#在安装过程中没有找到-ebtables-或者其他类似的可执行文件" class="headerlink" title="在安装过程中没有找到 ebtables 或者其他类似的可执行文件"></a>在安装过程中没有找到 ebtables 或者其他类似的可执行文件</h2><p><code>yum install ebtables ethtool</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改docker使用systemd来管里容器的cgroup，而不是cgroupfs</span><br>cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json<br>&#123;<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;log-driver&quot;: &quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;<br>    &quot;max-size&quot;: &quot;100m&quot;<br>  &#125;,<br>  &quot;storage-driver&quot;: &quot;overlay2&quot;<br>&#125;<br>EOF<br><br>sudo systemctl enable docker<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 国内节点</span><br>cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-\$basearch<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>exclude=kubelet kubeadm kubectl<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><br>sudo setenforce 0<br><span class="hljs-meta">#</span><span class="bash"> 关闭swap</span><br>swapoff -a<br>sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config<br><br>sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes<br><br>sudo systemctl enable --now kubelet<br><br>kubeadm init --image-repository=&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>应用部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未完成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S 二进制部署</title>
    <link href="/2022/01/15/K8S/K8S%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/01/15/K8S/K8S%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>Master的kube-apiserver、kube-controller-manager和kube-scheduler服务至少有3个节点<br>Master启用基于CA认证的HTTPS安全机制<br>etcd至少3个节点<br>etcd集群启用基于CA认证的HTTPS安全机制<br>Master启用RBAC授权</p><h2 id="设备准备"><a href="#设备准备" class="headerlink" title="设备准备"></a>设备准备</h2><p>三台服务器<br>系统：Centos 7 2009<br>IP：<br>  192.168.100.123<br>  192.168.100.124<br>  192.168.100.125<br>VIP：<br>  192。168.100.251<br>依赖：<br>  openssl</p><h2 id="创建CA证书"><a href="#创建CA证书" class="headerlink" title="创建CA证书"></a>创建CA证书</h2><p>可以使用openssl、easyrsa、cfssl等工具完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl genrsa -out ca.key 2048<br><span class="hljs-meta">#</span><span class="bash"> subj：“/CN”的值为master主机名或者IP</span><br><span class="hljs-meta">#</span><span class="bash"> day：设置证书有效期</span><br>openssl req -x509 -new -nodes -key ca.key -subj &quot;/CN=192.168.100.123&quot; -days 36500 -out ca.crt<br>mv ca.* /etc/kubernetes/pki/<br></code></pre></td></tr></table></figure><h2 id="部署etcd集群"><a href="#部署etcd集群" class="headerlink" title="部署etcd集群"></a>部署etcd集群</h2><h1 id="下载etcd二进制文件，配置systemd服务"><a href="#下载etcd二进制文件，配置systemd服务" class="headerlink" title="下载etcd二进制文件，配置systemd服务"></a>下载etcd二进制文件，配置systemd服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar zxvf etcd-v3.5.1-linux-amd64.tar.gz<br>mv etcd etcdctl -t /usr/bin<br>vi /usr/lib/systemd/system/etcd.service<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=etcd key-value store<br>Documentation=https://github.com/etcd-io/etcd<br>After=network.target<br><br>[Service]<br>EnvironmentFile=/etc/etcd/etcd.conf<br>ExecStart=/usr/bin/etcd<br>Restart=always<br><br>[install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h1 id="创建etcd的CA证书"><a href="#创建etcd的CA证书" class="headerlink" title="创建etcd的CA证书"></a>创建etcd的CA证书</h1><p><code>vi etcd_ssl.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[req]<br>req_extensions = v3_req<br>distinguished_name = req_distinguished_name<br><br>[ req_distinguished_name ]<br><br>[ v3_req ]<br><span class="hljs-meta">#</span><span class="bash"> Extensions to add to a certificate request</span><br>basicConstraints = CA:FALSE<br>keyUsage = nonRepudiation, digitalSignature, keyEncipherment<br>subjectAltName = @alt_names<br><br>[alt_names]<br>IP.1 = 192.168.100.123<br>IP.2 = 192.168.100.124<br>IP.3 = 192.168.100.125<br></code></pre></td></tr></table></figure><p>创建etcd服务端CA证书，包括key和crt文件，保存再/etc/etcd/pki目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl genrsa -out etcd_server.key 2048<br>openssl req -new -key etcd_server.key -config etcd_ssl.cnf -subj &quot;/CN=etcd-server&quot; -out etcd_server.csr<br>openssl x509 -req -in etcd_server.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -days 36500 -extensions v3_req -extfile etcd_ssl.cnf -out etcd_server.crt<br></code></pre></td></tr></table></figure><p>再创建客户端CA证书，包括</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl genrsa -out etcd_client.key 2048<br>openssl req -new -key etcd_client.key -config etcd_ssl.cnf -subj &quot;/CN=etcd-client&quot; -out etcd_client.csr<br>openssl x509 -req -in etcd_client.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -days 36500 -extensions v3_req -extfile etcd_ssl.cnf -out etcd_client.crt<br></code></pre></td></tr></table></figure><h1 id="etcd参数配置说明"><a href="#etcd参数配置说明" class="headerlink" title="etcd参数配置说明"></a>etcd参数配置说明</h1><p><code>vi /etc/etcd/etcd.conf</code><br>官方示例配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> This is the configuration file <span class="hljs-keyword">for</span> the etcd server.</span><br><span class="hljs-meta">#</span><span class="bash"> Human-readable name <span class="hljs-keyword">for</span> this member.</span><br>name: &#x27;etcd1&#x27;<br><span class="hljs-meta">#</span><span class="bash"> Path to the data directory.</span><br>data-dir: &quot;/etc/etcd/data&quot;<br><span class="hljs-meta">#</span><span class="bash"> Path to the dedicated wal directory.</span><br><span class="hljs-meta">#</span><span class="bash">wal-dir:</span><br><span class="hljs-meta">#</span><span class="bash"> Number of committed transactions to trigger a snapshot to disk.</span><br><span class="hljs-meta">#</span><span class="bash">snapshot-count: 10000</span><br><span class="hljs-meta">#</span><span class="bash"> Time (<span class="hljs-keyword">in</span> milliseconds) of a heartbeat interval.</span><br><span class="hljs-meta">#</span><span class="bash">heartbeat-interval: 100</span><br><span class="hljs-meta">#</span><span class="bash"> Time (<span class="hljs-keyword">in</span> milliseconds) <span class="hljs-keyword">for</span> an election to timeout.</span><br><span class="hljs-meta">#</span><span class="bash">election-timeout: 1000</span><br><span class="hljs-meta">#</span><span class="bash"> Raise alarms when backend size exceeds the given quota. 0 means use the</span><br><span class="hljs-meta">#</span><span class="bash"> default quota.</span><br><span class="hljs-meta">#</span><span class="bash">quota-backend-bytes: 0</span><br><span class="hljs-meta">#</span><span class="bash"> List of comma separated URLs to listen on <span class="hljs-keyword">for</span> peer traffic.</span><br>listen-peer-urls: &quot;https://192.168.100.123:2380&quot;<br><span class="hljs-meta">#</span><span class="bash"> List of comma separated URLs to listen on <span class="hljs-keyword">for</span> client traffic.</span><br>listen-client-urls: &quot;https://192.168.100.123:2379&quot;<br><span class="hljs-meta">#</span><span class="bash"> Maximum number of snapshot files to retain (0 is unlimited).</span><br><span class="hljs-meta">#</span><span class="bash">max-snapshots: 5</span><br><span class="hljs-meta">#</span><span class="bash"> Maximum number of wal files to retain (0 is unlimited).</span><br><span class="hljs-meta">#</span><span class="bash">max-wals: 5</span><br><span class="hljs-meta">#</span><span class="bash"> Comma-separated white list of origins <span class="hljs-keyword">for</span> CORS (cross-origin resource sharing).</span><br><span class="hljs-meta">#</span><span class="bash">cors:</span><br><span class="hljs-meta">#</span><span class="bash"> List of this member<span class="hljs-string">&#x27;s peer URLs to advertise to the rest of the cluster.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> The URLs needed to be a comma-separated list.</span></span><br>initial-advertise-peer-urls: &quot;https://192.168.100.123:2380&quot;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> List of this member&#x27;</span>s client URLs to advertise to the public.</span><br><span class="hljs-meta">#</span><span class="bash"> The URLs needed to be a comma-separated list.</span><br>advertise-client-urls: &quot;https://192.168.100.123:2379&quot;<br><span class="hljs-meta">#</span><span class="bash"> Discovery URL used to bootstrap the cluster.</span><br><span class="hljs-meta">#</span><span class="bash">discovery:</span><br><span class="hljs-meta">#</span><span class="bash"> Valid values include <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;proxy&#x27;</span></span><br><span class="hljs-meta">#</span><span class="bash">discovery-fallback: <span class="hljs-string">&#x27;proxy&#x27;</span></span><br><span class="hljs-meta">#</span><span class="bash"> HTTP proxy to use <span class="hljs-keyword">for</span> traffic to discovery service.</span><br><span class="hljs-meta">#</span><span class="bash">discovery-proxy:</span><br><span class="hljs-meta">#</span><span class="bash"> DNS domain used to bootstrap initial cluster.</span><br><span class="hljs-meta">#</span><span class="bash">discovery-srv:</span><br><span class="hljs-meta">#</span><span class="bash"> Initial cluster configuration <span class="hljs-keyword">for</span> bootstrapping.</span><br>initial-cluster: &quot;etcd1=https://192.168.100.123:2380,etcd2=https://192.168.100.124:2380,etcd3=https://192.168.100.125:2380&quot;<br><span class="hljs-meta">#</span><span class="bash"> Initial cluster token <span class="hljs-keyword">for</span> the etcd cluster during bootstrap.</span><br>initial-cluster-token: &#x27;etcd-cluster&#x27;<br><span class="hljs-meta">#</span><span class="bash"> Initial cluster state (<span class="hljs-string">&#x27;new&#x27;</span> or <span class="hljs-string">&#x27;existing&#x27;</span>).</span><br>initial-cluster-state: &#x27;new&#x27;<br><span class="hljs-meta">#</span><span class="bash"> Reject reconfiguration requests that would cause quorum loss.</span><br><span class="hljs-meta">#</span><span class="bash">strict-reconfig-check: <span class="hljs-literal">false</span></span><br><span class="hljs-meta">#</span><span class="bash"> Accept etcd V2 client requests</span><br><span class="hljs-meta">#</span><span class="bash">enable-v2: <span class="hljs-literal">true</span></span><br><span class="hljs-meta">#</span><span class="bash"> Enable runtime profiling data via HTTP server</span><br><span class="hljs-meta">#</span><span class="bash">enable-pprof: <span class="hljs-literal">true</span></span><br><span class="hljs-meta">#</span><span class="bash"> Valid values include <span class="hljs-string">&#x27;on&#x27;</span>, <span class="hljs-string">&#x27;readonly&#x27;</span>, <span class="hljs-string">&#x27;off&#x27;</span></span><br><span class="hljs-meta">#</span><span class="bash">proxy: <span class="hljs-string">&#x27;off&#x27;</span></span><br><span class="hljs-meta">#</span><span class="bash"> Time (<span class="hljs-keyword">in</span> milliseconds) an endpoint will be held <span class="hljs-keyword">in</span> a failed state.</span><br><span class="hljs-meta">#</span><span class="bash">proxy-failure-wait: 5000</span><br><span class="hljs-meta">#</span><span class="bash"> Time (<span class="hljs-keyword">in</span> milliseconds) of the endpoints refresh interval.</span><br><span class="hljs-meta">#</span><span class="bash">proxy-refresh-interval: 30000</span><br><span class="hljs-meta">#</span><span class="bash"> Time (<span class="hljs-keyword">in</span> milliseconds) <span class="hljs-keyword">for</span> a dial to timeout.</span><br><span class="hljs-meta">#</span><span class="bash">proxy-dial-timeout: 1000</span><br><span class="hljs-meta">#</span><span class="bash"> Time (<span class="hljs-keyword">in</span> milliseconds) <span class="hljs-keyword">for</span> a write to timeout.</span><br><span class="hljs-meta">#</span><span class="bash">proxy-write-timeout: 5000</span><br><span class="hljs-meta">#</span><span class="bash"> Time (<span class="hljs-keyword">in</span> milliseconds) <span class="hljs-keyword">for</span> a <span class="hljs-built_in">read</span> to timeout.</span><br><span class="hljs-meta">#</span><span class="bash">proxy-read-timeout: 0</span><br>client-transport-security:<br><span class="hljs-meta">  #</span><span class="bash"> Path to the client server TLS cert file.</span><br>  cert-file: &quot;/etc/etcd/pki/etcd_server.crt&quot;<br><span class="hljs-meta">  #</span><span class="bash"> Path to the client server TLS key file.</span><br>  key-file: &quot;/etc/etcd/pki/etcd_server.key&quot;<br><span class="hljs-meta">  #</span><span class="bash"> Enable client cert authentication.</span><br>  client-cert-auth: true<br><span class="hljs-meta">  #</span><span class="bash"> Path to the client server TLS trusted CA cert file.</span><br>  trusted-ca-file: &quot;/etc/kubernetes/pki/ca.crt&quot;<br><span class="hljs-meta">  #</span><span class="bash"> Client TLS using generated certificates</span><br><span class="hljs-meta">#</span><span class="bash">  auto-tls: <span class="hljs-literal">false</span></span><br>peer-transport-security:<br><span class="hljs-meta">  #</span><span class="bash"> Path to the peer server TLS cert file.</span><br>  cert-file: &quot;/etc/etcd/pki/etcd_server.crt&quot;<br><span class="hljs-meta">  #</span><span class="bash"> Path to the peer server TLS key file.</span><br>  key-file: &quot;/etc/etcd/pki/etcd_server.key&quot;<br><span class="hljs-meta">  #</span><span class="bash"> Enable peer client cert authentication.</span><br>  client-cert-auth: true<br><span class="hljs-meta">  #</span><span class="bash"> Path to the peer server TLS trusted CA cert file.</span><br>  trusted-ca-file: &quot;/etc/kubernetes/pki/ca.crt&quot;<br><span class="hljs-meta">  #</span><span class="bash"> Peer TLS using generated certificates.</span><br><span class="hljs-meta">#</span><span class="bash">  auto-tls: <span class="hljs-literal">false</span></span><br><span class="hljs-meta">#</span><span class="bash"> Enable debug-level logging <span class="hljs-keyword">for</span> etcd.</span><br>debug: false<br>logger: zap<br><span class="hljs-meta">#</span><span class="bash"> Specify <span class="hljs-string">&#x27;stdout&#x27;</span> or <span class="hljs-string">&#x27;stderr&#x27;</span> to skip journald logging even when running under systemd.</span><br>log-outputs: [stderr]<br><span class="hljs-meta">#</span><span class="bash"> Force to create a new one member cluster.</span><br><span class="hljs-meta">#</span><span class="bash">force-new-cluster: <span class="hljs-literal">false</span></span><br><span class="hljs-meta">#</span><span class="bash">auto-compaction-mode: periodic</span><br><span class="hljs-meta">#</span><span class="bash">auto-compaction-retention: <span class="hljs-string">&quot;1&quot;</span></span><br></code></pre></td></tr></table></figure><p>权威指南提供配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> node1 conf实例文件</span><br>ETCD_NAME=&quot;etcd1&quot;<br>ETCD_DATA_DIR=&quot;/etc/etcd/data&quot;<br><br>ETCD_CERT_FILE=&quot;/etc/etcd/pki/etcd_server.crt&quot;<br>ETCD_KEY_FILE=&quot;/etc/etcd/pki/etcd_server.key&quot;<br>ETCD_TRUSTED_CA_FILE=&quot;/etc/kubernetes/pki/ca.crt&quot;<br>ETCD_CLIENT_CERT_AUTH=true<br>ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.100.123:2379&quot;<br>ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.100.123:2379&quot;<br>ETCD_PEER_CERT_FILE=&quot;/etc/etcd/pki/etcd_server.crt&quot;<br>ETCD_PEER_KEY_FILE=&quot;/etc/etcd/pki/etcd_server.key&quot;<br>ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/kubernetes/pki/ca.crt&quot;<br>ETCD_LISTEN_PEER_URLS=&quot;https://192.168.100.123:2380&quot;<br>ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.100.123:2380&quot;<br><br>ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;<br>ETCD_INITIAL_CLUSTER=&quot;etcd1=https://192.168.100.123:2380,etcd2=https://192.168.100.124:2380,etcd3=https://192.168.100.125:2380&quot;<br>ETCD_INITIAL_CLUSTER_STATE=new<br><br></code></pre></td></tr></table></figure><h1 id="验证etcd部署"><a href="#验证etcd部署" class="headerlink" title="验证etcd部署"></a>验证etcd部署</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> etcdctl endpoint health</span><br>127.0.0.1:2379 is healthy: successfully committed proposal: took = 1.<br><span class="hljs-meta">#</span><span class="bash"> etcdctl --cacert=/etc/kubernetes/pki/ca.crt --cert=/etc/etcd/pki/etcd_client.crt --key=/etc/etcd/pki/etcd_client.key --endpoints=https://192.168.100.123:2379,https://192.168.100.124:2379,https://192.168.100.125:2379 endpoint health</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>应用部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未完成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 语法</title>
    <link href="/2021/12/15/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/12/15/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.markdownguide.org/basic-syntax/">https://www.markdownguide.org/basic-syntax/</a></p><p>标题<br>To create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level. For example, to create a heading level three (&lt;h3&gt;), use three number signs (e.g., ### My Header).</p><table><thead><tr><th>Markdown</th><th>HTML</th><th>Rendered Output</th></tr></thead><tbody><tr><td># Heading level 1</td><td>&lt;h1&gt;Heading level 1&lt;/h1&gt;</td><td><h1>Heading level 1</h1></td></tr><tr><td>## Heading level 2</td><td>&lt;h2&gt;Heading level 2&lt;/h2&gt;</td><td><h2>Heading level 2</h2></td></tr><tr><td>### Heading level 3</td><td>&lt;h3&gt;Heading level 3&lt;/h3&gt;</td><td><h3>Heading level 3</h3></td></tr><tr><td>#### Heading level 4</td><td>&lt;h4&gt;Heading level 4&lt;/h4&gt;</td><td><h4>Heading level 4</h4></td></tr><tr><td>##### Heading level 5</td><td>&lt;h5&gt;Heading level 5&lt;/h5&gt;</td><td><h5>Heading level 5</h5></td></tr><tr><td>###### Heading level 6</td><td>&lt;h6&gt;Heading level 6&lt;/h6&gt;</td><td><h6>Heading level 6</h6></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>programme</category>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未完成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装步骤</title>
    <link href="/2021/12/15/Docker%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <url>/2021/12/15/Docker%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>                docker-client \<br>                docker-client-latest \<br>                docker-common \<br>                docker-latest \<br>                docker-latest-logrotate \<br>                docker-logrotate \<br>                docker-engine<br>sudo yum install -y yum-utils<br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br>sudo yum install -y docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>应用部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未完成</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP编址</title>
    <link href="/2021/12/15/IP%E7%BC%96%E5%9D%80/"/>
    <url>/2021/12/15/IP%E7%BC%96%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<p>网络层位于数据链路层与传输层之间。网络层中包含了许多协议，其中最为重要的协议就是IP协议。网络层提供了IP路由功能。理解IP路由除了要熟悉IP协议的工作机制之外，还必须理解IP编址以及如何合理地使用IP地址来设计网络</p><h2 id="IP编址"><a href="#IP编址" class="headerlink" title="IP编址"></a>IP编址</h2><h3 id="IP报文结构"><a href="#IP报文结构" class="headerlink" title="IP报文结构"></a>IP报文结构</h3><p>上层协议类型<br>以太网帧中的Type字段值为0x0800，表示该帧的网络层协议为IP协议</p><h4 id="IP报文头部"><a href="#IP报文头部" class="headerlink" title="IP报文头部"></a>IP报文头部</h4><p>20~60 Byte<br>Version 版本号：IPv4 IPv6<br>Header Length 头部长度：<br>DS Field：<br>Total Length 总长度：</p><p>Time to Live（TTL）<br>Protocol<br>Header check</p><p>Source IP Address<br>Destination IP Address</p><h4 id="IP编址-1"><a href="#IP编址-1" class="headerlink" title="IP编址"></a>IP编址</h4><p>网络位+主机位<br>主机位全为0（0）是网络地址<br>主机位全为1（255）是广播地址</p><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><p>A类 0+网络位8bit+主机位24bit 0.0.0.0-127.255.255.255<br>B类 10+网络位16bit+主机位24bit 128.0.0.0-191.255.255.255<br>C类 110+网络位8bit+主机位24bit 192.0.0.0-223.255.255.255<br>D类 1110组播地址 244.0.0.0-239.255.255.255<br>E类 1111保留地址 240.0.0.0-255.255.255.255</p><p>私有地址<br>10.0.0.0-10.255.255.255<br>172.16.0.0-172.31.255.255<br>192.168.0.0-192.168.255.255<br>特殊地址<br>127.0.0.0-127.255.255.255 测试用IP<br>0.0.0.0<br>255.255.255.255 广播地址</p><p>子网掩码用于确定网络地址（网段），方法是利用子网掩码与IP地址位相与<br>A类255.0.0.0<br>B类255.255.0.0<br>C类255.255.255.0<br>主机数是2^n<br>可用主机数是2^n-2</p><h3 id="VLSM技术"><a href="#VLSM技术" class="headerlink" title="VLSM技术"></a>VLSM技术</h3><p>变长子网掩码<br>24位（255.255.255.0）变长为25位（255.255.255.128）126台设备<br>24位（255.255.255.0）变长为23位（255.255.254.0）510台设备</p><p>无类域间路由<br>CIDR增强了网络可扩展性<br>通告路由10.24.0.0/22可以统一接受10.24.1.0/24的数据</p><h3 id="网关作用"><a href="#网关作用" class="headerlink" title="网关作用"></a>网关作用</h3><p>网关用来转发来自不同网段之间的数据包</p><p>IP包分片</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>已整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/2021/12/15/Linux/linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/12/15/Linux/linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ol><li><p>查看有多少个IP访问：<br><code>awk &#39;&#123;print $1&#125;&#39; log_file|sort|uniq|wc -l</code></p></li><li><p>查看某一个页面被访问的次数：<br><code>grep &quot;/index.php&quot; log_file | wc -l</code></p></li><li><p>查看每一个IP访问了多少个页面：<br><code>awk &#39;&#123;++S[$1]&#125; END &#123;for (a in S) print a,S[a]&#125;&#39; log_file &gt; log.txt</code><br><code>sort -n -t &#39; &#39; -k 2 log.txt</code>配合sort进一步排序</p></li><li><p>将每个IP访问的页面数进行从小到大排序：<br><code>awk &#39;&#123;++S[$1]&#125; END &#123;for (a in S) print S[a],a&#125;&#39; log_file | sort -n</code></p></li><li><p>查看某一个IP访问了哪些页面：<br><code>grep ^111.111.111.111 log_file| awk &#39;&#123;print $1,$7&#125;&#39;</code></p></li><li><p>去掉搜索引擎统计的页面：<br><code>awk &#39;&#123;print $12,$1&#125;&#39; log_file | grep ^\&quot;Mozilla | awk &#39;&#123;print $2&#125;&#39; |sort | uniq | wc -l</code></p></li><li><p>查看2015年8月16日14时这一个小时内有多少IP访问:<br><code>awk &#39;&#123;print $4,$1&#125;&#39; log_file | grep 16/Aug/2015:14 | awk &#39;&#123;print $2&#125;&#39;| sort | uniq | wc -l</code></p></li><li><p>查看访问前十个ip地址<br><code>awk &#39;&#123;print $1&#125;&#39; |sort|uniq -c|sort -nr |head -10 access_log</code><br><code>uniq -c</code> 相当于分组统计并把统计数放在最前面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat access.log|awk &#x27;&#123;print $1&#125;&#x27;|sort|uniq -c|sort -nr|head -10<br>cat access.log|awk &#x27;&#123;counts[$(11)]+=1&#125;; END &#123;for(url in counts) print counts[url], url&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问次数最多的10个文件或页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat log_file|awk &#x27;&#123;print $11&#125;&#x27;|sort|uniq -c|sort -nr | head -10<br>cat log_file|awk &#x27;&#123;print $11&#125;&#x27;|sort|uniq -c|sort -nr|head -20<br>awk &#x27;&#123;print $1&#125;&#x27; log_file |sort -n -r |uniq -c | sort -n -r | head -20<br></code></pre></td></tr></table></figure><p>访问量最大的前20个ip</p></li><li><p>通过子域名访问次数，依据referer来计算，稍有不准<br><code>cat access.log | awk &#39;&#123;print $11&#125;&#39; | sed -e &#39; s/http:\/\///&#39; -e &#39; s/\/.*//&#39; | sort | uniq -c | sort -rn | head -20</code></p></li><li><p>列出传输大小最大的几个文件<br><code>cat www.access.log |awk &#39;($7~/\.php/)&#123;print $10 &quot; &quot; $1 &quot; &quot; $4 &quot; &quot; $7&#125;&#39;|sort -nr|head -100</code></p></li><li><p>列出输出大于200000byte(约200kb)的页面以及对应页面发生次数<br><code>cat www.access.log |awk &#39;($10 &gt; 200000 &amp;&amp; $7~/\.php/)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -100</code></p></li><li><p>如果日志最后一列记录的是页面文件传输时间，则有列出到客户端最耗时的页面<br><code>cat www.access.log |awk &#39;($7~/\.php/)&#123;print $NF &quot; &quot; $1 &quot; &quot; $4 &quot; &quot; $7&#125;&#39;|sort -nr|head -100</code></p></li><li><p>列出最最耗时的页面(超过60秒的)的以及对应页面发生次数<br><code>cat www.access.log |awk &#39;($NF &gt; 60 &amp;&amp; $7~/\.php/)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -100</code></p></li><li><p>列出传输时间超过 30 秒的文件<br><code>cat www.access.log |awk &#39;($NF &gt; 30)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -20</code></p></li><li><p>列出当前服务器每一进程运行的数量，倒序排列<br><code>ps -ef | awk -F &#39; &#39; &#39;&#123;print $8 &quot; &quot; $9&#125;&#39; |sort | uniq -c |sort -nr |head -20</code></p></li><li><p>查看apache当前并发访问数<br>对比httpd.conf中MaxClients的数字差距多少<br><code>netstat -an | grep ESTABLISHED | wc -l</code></p></li><li><p>可以使用如下参数查看数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef|grep httpd|wc -l<br>1388<br></code></pre></td></tr></table></figure><p>统计httpd进程数，连个请求会启动一个进程，使用于Apache服务器。<br>表示Apache能够处理1388个并发请求，这个值Apache可根据负载情况自动调整</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -nat|grep -i &quot;80&quot;|wc -l<br>4341<br></code></pre></td></tr></table></figure><p><code>netstat -an</code>会打印系统当前网络链接状态，而<code>grep -i &quot;80&quot;</code>是用来提取与80端口有关的连接的，<code>wc -l</code>进行连接数统计。<br>最终返回的数字就是当前所有80端口的请求总数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -na|grep ESTABLISHED|wc -l<br>376<br></code></pre></td></tr></table></figure><p><code>netstat -an</code>会打印系统当前网络链接状态，而<code>grep ESTABLISHED</code>提取出已建立连接的信息。然后<code>wc -l</code>统计<br>最终返回的数字就是当前所有80端口的已建立连接的总数。<br><code>netstat -nat||grep ESTABLISHED|wc</code><br>可查看所有建立连接的详细记录</p></li><li><p>输出每个ip的连接数，以及总的各个状态的连接数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -n | awk &#x27;/^tcp/ &#123;n=split($(NF-1),array,&quot;:&quot;);if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf(&quot;%-20s %s\n&quot;, a, S[a]);++I&#125;printf(&quot;%-20s %s\n&quot;,&quot;TOTAL_IP&quot;,I);for(a in s) printf(&quot;%-20s %s\n&quot;,a, s[a]);printf(&quot;%-20s %s\n&quot;,&quot;TOTAL_LINK&quot;,N);&#125;&#x27;<br></code></pre></td></tr></table></figure></li><li><p>其他的收集<br>分析日志文件下 2012-05-04 访问页面最高 的前20个 URL 并排序<br><code>cat access.log |grep &#39;04/May/2012&#39;| awk &#39;&#123;print $11&#125;&#39;|sort|uniq -c|sort -nr|head -20</code><br>查询受访问页面的URL地址中 含有 <a href="http://www.abc.com/">www.abc.com</a> 网址的 IP 地址<br><code>cat access_log | awk &#39;($11~/\www.abc.com/)&#123;print $1&#125;&#39;|sort|uniq -c|sort -nr</code><br>获取访问最高的10个IP地址 同时也可以按时间来查询<br><code>cat linewow-access.log|awk &#39;&#123;print $1&#125;&#39;|sort|uniq -c|sort -nr|head -10</code><br>时间段查询日志时间段的情况<br><code>cat log_file | egrep &#39;15/Aug/2015|16/Aug/2015&#39; |awk &#39;&#123;print $1&#125;&#39;|sort|uniq -c|sort -nr|head -10</code><br>分析 2015/8/15 到 2015/8/16 访问”/index.php?g=Member&amp;m=Public&amp;a=sendValidCode”的IP倒序排列<br><code>cat log_file | egrep &#39;15/Aug/2015|16/Aug/2015&#39; | awk &#39;&#123;if($7 == &quot;/index.php?g=Member&amp;m=Public&amp;a=sendValidCode&quot;) print $1,$7&#125;&#39;|sort|uniq -c|sort -nr</code><br>($7~/.php/)$7里面包含.php的就输出,本句的意思是最耗时的一百个PHP页面<br><code>cat log_file |awk &#39;($7~/\.php/)&#123;print $NF &quot; &quot; $1 &quot; &quot; $4 &quot; &quot; $7&#125;&#39;|sort -nr|head -100</code><br>列出最最耗时的页面(超过60秒的)的以及对应页面发生次数<br><code>cat access.log |awk &#39;($NF &gt; 60 &amp;&amp; $7~/\.php/)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -100</code><br>统计网站流量（G)<br><code>cat access.log |awk &#39;&#123;sum+=$10&#125; END &#123;print sum/1024/1024/1024&#125;&#39;</code><br>统计404的连接<br><code>awk &#39;($9 ~/404/)&#39; access.log | awk &#39;&#123;print $9,$7&#125;&#39; | sort</code><br>统计http status</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat access.log |awk &#x27;&#123;counts[$(9)]+=1&#125;; END &#123;for(code in counts) print code, counts[code]&#125;&#x27;<br>cat access.log |awk &#x27;&#123;print $9&#125;&#x27;|sort|uniq -c|sort -rn<br></code></pre></td></tr></table></figure><p>每秒并发<br><code>watch &quot;awk &#39;&#123;if($9~/200|30|404/)COUNT[$4]++&#125;END&#123;for( a in COUNT) print a,COUNT[a]&#125;&#39; log_file|sort -k 2 -nr|head -n10&quot;</code><br>带宽统计<br><code>cat apache.log |awk &#39;&#123;if($7~/GET/) count++&#125;END&#123;print &quot;client_request=&quot;count&#125;&#39;</code><br>找出某天访问次数最多的10个IP<br><code>cat /tmp/access.log | grep &quot;20/Mar/2011&quot; |awk &#39;&#123;print $3&#125;&#39;|sort |uniq -c|sort -nr|head</code><br>当天ip连接数最高的ip都在干些什么<br><code>cat access.log | grep &quot;10.0.21.17&quot; | awk &#39;&#123;print $8&#125;&#39; | sort | uniq -c | sort -nr | head -n 10</code><br>小时单位里ip连接数最多的10个时段<br><code>awk -vFS=&quot;[:]&quot; &#39;&#123;gsub(&quot;-.*&quot;,&quot;&quot;,$1);num[$2&quot; &quot;$1]++&#125;END&#123;for(i in num)print i,num[i]&#125;&#39; log_file | sort -n -k 3 -r | head -10</code><br>找出访问次数最多的几个分钟<br><code>awk &#39;&#123;print $1&#125;&#39; access.log | grep &quot;20/Mar/2011&quot; |cut -c 14-18|sort|uniq -c|sort -nr|head</code><br>取5分钟日志<br><code>if [ $DATE_MINUTE != $DATE_END_MINUTE ] ;then #</code><br>则判断开始时间戳与结束时间戳是否相等<br><code>START_LINE=sed -n &quot;/$DATE_MINUTE/=&quot; $APACHE_LOG|head -n1 #如果不相等，则取出开始时间戳的行号，与结束时间戳的行号</code><br>查看tcp的链接状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -nat |awk &#x27;&#123;print $6&#125;&#x27;|sort|uniq -c|sort -rn <br>netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125;;END &#123;for(a in S) print a, S[a]&#125;&#x27; <br>netstat -n | awk &#x27;/^tcp/ &#123;++state[$NF]&#125;; END &#123;for(key in state) print key,&quot;\t&quot;,state[key]&#125;&#x27; <br>netstat -n | awk &#x27;/^tcp/ &#123;++arr[$NF]&#125;;END &#123;for(k in arr) print k,&quot;\t&quot;,arr[k]&#125;&#x27; <br>netstat -n |awk &#x27;/^tcp/ &#123;print $NF&#125;&#x27;|sort|uniq -c|sort -rn <br>netstat -ant | awk &#x27;&#123;print $NF&#125;&#x27; | grep -v &#x27;[a-z]&#x27; | sort | uniq -c<br>netstat -ant|awk &#x27;/ip:80/&#123;split($5,ip,&quot;:&quot;);++S[ip[1]]&#125;END&#123;for (a in S) print S[a],a&#125;&#x27; |sort -n <br>netstat -ant|awk &#x27;/:80/&#123;split($5,ip,&quot;:&quot;);++S[ip[1]]&#125;END&#123;for (a in S) print S[a],a&#125;&#x27; |sort -rn|head -n 10 <br>awk &#x27;BEGIN&#123;printf (&quot;http_code\tcount_num\n&quot;)&#125;&#123;COUNT[$10]++&#125;END&#123;for (a in COUNT) printf a&quot;\t\t&quot;COUNT[a]&quot;\n&quot;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>查找请求数前20个IP（常用于查找攻来源）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -anlp|grep 80|grep tcp|awk &#x27;&#123;print $5&#125;&#x27;|awk -F: &#x27;&#123;print $1&#125;&#x27;|sort|uniq -c|sort -nr|head -n20 <br>netstat -ant |awk &#x27;/:80/&#123;split($5,ip,&quot;:&quot;);++A[ip[1]]&#125;END&#123;for(i in A) print A[i],i&#125;&#x27; |sort -rn|head -n20<br></code></pre></td></tr></table></figure><p>用tcpdump嗅探80端口的访问看看谁最高<br><code>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F&quot;.&quot; &#39;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4&#125;&#39; | sort | uniq -c | sort -nr |head -20</code><br>查找较多time_wait连接<br><code>netstat -n|grep TIME_WAIT|awk &#39;&#123;print $5&#125;&#39;|sort|uniq -c|sort -rn|head -n20</code><br>找查较多的SYN连接<br><code>netstat -an | grep SYN | awk &#39;&#123;print $5&#125;&#39; | awk -F: &#39;&#123;print $1&#125;&#39; | sort | uniq -c | sort -nr | more</code><br>根据端口列进程<br><code>netstat -ntlp | grep 80 | awk &#39;&#123;print $7&#125;&#39; | cut -d/ -f1</code><br>查看了连接数和当前的连接数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -ant | grep $ip:80 | wc -l <br>netstat -ant | grep $ip:80 | grep EST | wc -l<br></code></pre></td></tr></table></figure><p>查看IP访问次数<br><code>netstat -nat|grep &quot;:80&quot;|awk &#39;&#123;print $5&#125;&#39; |awk -F: &#39;&#123;print $1&#125;&#39; | sort| uniq -c|sort -n</code><br>Linux命令分析当前的链接状况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;<br>watch &quot;netstat -n | awk &#x27;/^tcp/ &#123;++S[\$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;&quot; # 通过watch可以一直监控<br></code></pre></td></tr></table></figure><p>LAST_ACK 5 #关闭一个TCP连接需要从两个方向上分别进行关闭，双方都是通过发送FIN来表示单方向数据的关闭，当通信双方发送了最后一个FIN的时候，发送方此时处于LAST_ACK状态，当发送方收到对方的确认（Fin的Ack确认）后才真正关闭整个TCP连接；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">SYN_RECV 30 # 表示正在等待处理的请求数；<br>ESTABLISHED 1597 # 表示正常数据传输状态；<br>FIN_WAIT1 51 # 表示server端主动要求关闭tcp连接；<br>FIN_WAIT2 504 # 表示客户端中断连接；<br>TIME_WAIT 1057 # 表示处理完毕，等待超时结束的请求数；<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>日常操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
